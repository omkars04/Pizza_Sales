-- retrieve the total number of order placed
SELECT 
    COUNT(order_id) AS Total_orders
FROM
    pizzahut.orders

-- calculate the total revenue generated by pizza sale 

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            3) AS Total_revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id

-- identify the highest priced pizza
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- identify most commonly ordered pizza

SELECT 
    COUNT(quantity) AS Total_count, size
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
GROUP BY size
ORDER BY Total_count DESC
LIMIT 1;

-- list the most ordered pizza types along with the quantities
SELECT 
    pizza_types.name, SUM(quantity) AS Total_Quantity
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.name
ORDER BY Total_Quantity DESC
LIMIT 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS Total_quantity
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.category
ORDER BY Total_quantity DESC

-- Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time) AS Hours, COUNT(order_id)
FROM
    orders
GROUP BY Hours;

-- Join relevant tables to find the category-wise distribution of pizzas.
SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(Total_quantity),0)
FROM
    (SELECT 
        orders.order_date,
            SUM(order_details.quantity) AS Total_quantity
    FROM
        orders
    JOIN order_details ON order_details.order_id = orders.order_id
    GROUP BY orders.order_date) AS ordered_quantity;
    
--     Determine the top 3 most ordered pizza types based on revenue.
SELECT 
    pizzas.pizza_type_id,
    sum(order_details.quantity * pizzas.price) AS revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizzas.pizza_type_id
ORDER BY revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.
SELECT 
    pizza_types.category,
    (SUM(pizzas.price * order_details.quantity)/(select sum(order_details.quantity * pizzas.price) 
    from order_details join pizzas on order_details.pizza_id =  pizzas.pizza_id ))*100 AS per_revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category;

-- Analyze the cumulative revenue generated over time.

select order_date,
sum(revenue) over(order by order_date) as cum_revenue from
(select orders.order_date,round(sum(order_details.quantity * pizzas.price),2) as revenue
from order_details join pizzas on order_details.pizza_id = pizzas.pizza_id
join orders on order_details.order_id = orders.order_id
group by orders.order_date) as sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
select name , revenue 
from
(select category, name, revenue,
Rank() over(partition by category order by revenue desc) as rk
from
(select pizza_types.category,pizza_types.name,round(sum(order_details.quantity * pizzas.price),2) as revenue
from order_details join pizzas on order_details.pizza_id = pizzas.pizza_id
join pizza_types on pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.category,pizza_types.name) as a)as b
where rk<=3;
